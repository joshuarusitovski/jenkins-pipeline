pipeline {
    agent any
    environment {
        MAVEN_HOME = tool 'Maven 3.8.5'
        SONARQUBE = 'SonarQube'
        STAGING_SERVER = 'ec2-user@staging-ip'
        PROD_SERVER = 'ec2-user@production-ip'
    }
    stages {
        stage('Build') {
            steps {
                echo 'Building the application...'
                sh "${MAVEN_HOME}/bin/mvn clean package -DskipTests"
            }
        }

        stage('Unit and Integration Tests') {
            steps {
                echo 'Running unit and integration tests...'
                sh "${MAVEN_HOME}/bin/mvn test integration-test"
            }
        }

        stage('Code Analysis') {
            steps {
                echo 'Running SonarQube code analysis...'
                withSonarQubeEnv("${SONARQUBE}") {
                    sh "${MAVEN_HOME}/bin/mvn sonar:sonar"
                }
            }
        }

        stage('Security Scan') {
            steps {
                echo 'Running security scan with OWASP Dependency-Check...'
                sh 'dependency-check.sh --project my-app --scan . --format ALL'
            }
        }

        stage('Deploy to Staging') {
            steps {
                echo 'Deploying to staging server...'
                sshagent (credentials: ['staging-server-creds']) {
                    sh """
                    scp target/*.jar $STAGING_SERVER:/home/ec2-user/app/
                    ssh $STAGING_SERVER 'bash /home/ec2-user/app/restart.sh'
                    """
                }
            }
        }

        stage('Integration Tests on Staging') {
            steps {
                echo 'Running integration tests on staging...'
                sh 'newman run postman_collection.json'
            }
        }

        stage('Deploy to Production') {
            steps {
                echo 'Deploying to production server...'
                sshagent (credentials: ['prod-server-creds']) {
                    sh """
                    scp target/*.jar $PROD_SERVER:/home/ec2-user/app/
                    ssh $PROD_SERVER 'bash /home/ec2-user/app/restart.sh'
                    """
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline completed.'
        }
    }
}
